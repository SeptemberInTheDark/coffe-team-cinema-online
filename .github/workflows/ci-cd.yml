name: Test and Deploy

on:
  push:
    branches:
      - master
      - demo
      - dev_iprepin
      - dev/andrey_solovev

jobs:
  test:
    runs-on: ubuntu-22.04
    env:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
      POSTGRES_HOST: localhost
      POSTGRES_DB: test_db
      POSTGRES_PORT: 5432
      DATABASE_URL_TEST: postgresql+asyncpg://test_user:test_pass@localhost:5432/test_db
      PHONE_VALIDATOR: ${{ secrets.PHONE_VALIDATOR }}
      EMAIL_VALIDATOR: ${{ secrets.EMAIL_VALIDATOR }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
      SMTP_PASS: ${{ secrets.SMTP_PASS }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
      redis:
        image: redis
        env:
          REDIS_HOST: redis
          REDIS_PORT: 6379
          REDIS_URL: ${{ env.REDIS_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: pip install -r requirements/dev.txt

      - name: Run linters
        run: ruff check

      - name: Run tests
        env:
          DATABASE_URL_TEST: ${{ env.DATABASE_URL_TEST }}
        run: pytest -v --cov=src tests/


#   Деплой на сервер для ветки master
  deploy:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to server using Docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd coffe-team-cinema-online
            git pull origin master
            
          # Получаем временную метку для новой версии контейнера
            TIMESTAMP=$(date +"%Y%m%d%H%M%S")

          # Строим новый образ с меткой по временной метке
            docker build . --tag fastapi_app:$TIMESTAMP
          
          # Запуск нового контейнера
            docker run -d --name fastapi_app_$TIMESTAMP -p 88:80 fastapi_app:$TIMESTAMP

          # Проверяем, существует ли предыдущий контейнер fastapi_app_current
            if [ "$(docker ps -q -f name=fastapi_app_current)" ]; then
              echo "Stopping and renaming current container to fastapi_app_previous..."
              docker stop fastapi_app_current
              docker rename fastapi_app_current fastapi_app_previous
            fi

          # Переименовываем новый контейнер в fastapi_app_current
            docker rename fastapi_app_$TIMESTAMP fastapi_app_current

          # Удаляем позапрошлый контейнер, если он существует
            if [ "$(docker ps -a -q -f name=fastapi_app_previous)" ]; then
              echo "Removing old previous container..."
              docker rm fastapi_app_previous
            fi

          # Удаляем старый образ
            docker image prune -f
